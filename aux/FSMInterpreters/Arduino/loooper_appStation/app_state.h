// app_state.h
// code generated by appStation (a state machine diagramming app)
// state machine vars and methods...

// State enumerated type declaration
typedef enum { buzz_state_start, buzz_state_R1_a, buzz_state_R2_a, buzz_state_L1_a, buzz_state_L2_a, buzz_state_inc_a, buzz_state_dec_a, buzz_state_pp_a, buzz_state_L0_a, buzz_state_R0_a } State;

// State_item is a struct that is useful in recording any change in state.
typedef struct State_item {
  State s;
  boolean changed; // indicates that this state has had a transitions applied (essential to self transitions).
} State_item;
// Signal enumerated type declaration
typedef enum { RecA_dn, RecA_up, times_up, RecB_dn, done, Mode_dn } Signal;

// global state variable declaration
State_item state;

// setup pre-init state function
State_item setup_pre_init_state() {
  send_signal(buzz_state_start);
  State_item pre_state;
  pre_state.s = (State)-1;
  pre_state.changed = false;
  return pre_state;
}

// onTick processor function
void onTick_processor(State state) {
  switch (state) {
  }
}

// onEnterState processor function
void onEnterState_processor(State state, int sig, int sig_data) {
  switch (state) {
    case buzz_state_R1_a :
      sound_board(0, board_rec_on); rec_a_start = millis(); setTimer(9500);
    break;
    case buzz_state_R2_a :
      rec_a_duration = millis() - rec_a_start; setTimer(rec_a_duration);
    break;
    case buzz_state_L1_a :
      setTimer(rec_a_duration); sound_board(0, click_play);
    break;
    case buzz_state_inc_a :
      rec_a_duration += 100;
    break;
    case buzz_state_dec_a :
      rec_a_duration -= 100;
    break;
    case buzz_state_L0_a :
      sound_board(0, click_play);
    break;
    case buzz_state_R0_a :
      sound_board(0, board_rec_off);
    break;
  }
}

  // process the state transition
State_item state_trans_processor(State_item state, int sig, int sig_data) {
  switch (state.s) {
      case buzz_state_start :
        switch (sig) {
          case RecA_dn :
            state.s = buzz_state_R1_a;
            state.changed = true;
          break;
          case Mode_dn :
            state.s = buzz_state_L2_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_R1_a :
        switch (sig) {
          case RecA_up :
            state.s = buzz_state_R2_a;
            state.changed = true;
          break;
          case times_up :
            state.s = buzz_state_R2_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_R2_a :
        switch (sig) {
          case times_up :
            state.s = buzz_state_R0_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_L1_a :
        switch (sig) {
          case RecB_dn :
            state.s = buzz_state_inc_a;
            state.changed = true;
          break;
          case RecA_dn :
            state.s = buzz_state_dec_a;
            state.changed = true;
          break;
          case Mode_dn :
            state.s = buzz_state_L2_a;
            state.changed = true;
          break;
          case times_up :
            state.s = buzz_state_L0_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_L2_a :
        switch (sig) {
          case Mode_dn :
            state.s = buzz_state_L1_a;
            state.changed = true;
          break;
          case RecB_dn :
            state.s = buzz_state_pp_a;
            state.changed = true;
          break;
          case RecA_dn :
            state.s = buzz_state_R1_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_inc_a :
        switch (sig) {
          case done :
            state.s = buzz_state_L1_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_dec_a :
        switch (sig) {
          case done :
            state.s = buzz_state_L1_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_pp_a :
        switch (sig) {
          case done :
            state.s = buzz_state_L2_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_L0_a :
        switch (sig) {
          case done :
            state.s = buzz_state_L1_a;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_R0_a :
        switch (sig) {
          case done :
            state.s = buzz_state_L1_a;
            state.changed = true;
          break;
        }
      break;
      default :
        state.s = buzz_state_start;
        state.changed = true;
  }
  return state;
}

// debug State by name
#ifdef DEBUG_STATE || DEBUG_EVENTS
char *state_name(int state) {
  switch (state) {
   case buzz_state_start :  return "start";
   case buzz_state_R1_a :  return "R1_a";
   case buzz_state_R2_a :  return "R2_a";
   case buzz_state_L1_a :  return "L1_a";
   case buzz_state_L2_a :  return "L2_a";
   case buzz_state_inc_a :  return "inc_a";
   case buzz_state_dec_a :  return "dec_a";
   case buzz_state_pp_a :  return "pp_a";
   case buzz_state_L0_a :  return "L0_a";
   case buzz_state_R0_a :  return "R0_a";
  }
  return "un-named state";
}
#endif

// debug Signal by name
#ifdef DEBUG_STATE || DEBUG_EVENTS
char *signal_name(int signal) {
  switch (signal) {
   case RecA_dn :  return "RecA_dn";
   case RecA_up :  return "RecA_up";
   case times_up :  return "times_up";
   case RecB_dn :  return "RecB_dn";
   case done :  return "done";
   case Mode_dn :  return "Mode_dn";
  }
  return "un-named signal";
}
#endif


