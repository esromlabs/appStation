// app_state.h
// code generated by appStation (a state machine diagramming app)
// state machine vars and methods...

// State enumerated type declaration
typedef enum { buzz_state_on, buzz_state_start } State;

// State_item is a struct that is useful in recording any change in state.
typedef struct State_item {
  State s;
  boolean changed; // indicates that this state has had a transitions applied (essential to self transitions).
} State_item;
// Signal enumerated type declaration
typedef enum { times_up } Signal;

// global state variable declaration
State_item state;

// setup pre-init state function
State_item setup_pre_init_state() {
  send_signal(buzz_state_start);
  State_item pre_state;
  pre_state.s = (State)-1;
  pre_state.changed = false;
  return pre_state;
}

// onTick processor function
void onTick_processor(State state) {
  switch (state) {
  }
}

// onEnterState processor function
void onEnterState_processor(State state, int sig, int sig_data) {
  switch (state) {
    case buzz_state_on :
      led(ON); set_timer(500);
    break;
    case buzz_state_start :
      led(OFF); set_timer(500);
    break;
  }
}

  // process the state transition
State_item state_trans_processor(State_item state, int sig, int sig_data) {
  switch (state.s) {
      case buzz_state_on :
        switch (sig) {
          case times_up :
            state.s = buzz_state_start;
            state.changed = true;
          break;
        }
      break;
      case buzz_state_start :
        switch (sig) {
          case times_up :
            state.s = buzz_state_on;
            state.changed = true;
          break;
        }
      break;
      default :
        state.s = buzz_state_start;
        state.changed = true;
  }
  return state;
}

// debug State by name
#ifdef DEBUG_STATE || DEBUG_EVENTS
char *state_name(int state) {
  switch (state) {
   case buzz_state_on :  return "on";
   case buzz_state_start :  return "start";
  }
  return "un-named state";
}
#endif

// debug Signal by name
#ifdef DEBUG_STATE || DEBUG_EVENTS
char *signal_name(int signal) {
  switch (signal) {
   case times_up :  return "times_up";
  }
  return "un-named signal";
}
#endif
